// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sidebar should match previous snapshot (with question) 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Sidebar
    conceptContent={
      Array [
        Object {
          "content": "test lesson content",
          "description": "test lesson description",
          "id": 1,
          "order": 0,
          "title": "test lesson",
        },
        Object {
          "content": "lesson 1's content",
          "description": "another lesson description",
          "id": 1,
          "order": 1,
          "title": "lesson 1",
        },
        Object {
          "content": "lesson 2's content",
          "description": "another lesson description",
          "id": 2,
          "order": 2,
          "title": "lesson 2",
        },
      ]
    }
    conceptTitle="test concept"
    currentLesson={
      Object {
        "content": "test lesson content",
        "description": "test lesson description",
        "exercises": Array [
          Object {
            "id": "dummy_exercise_id_1",
            "questions": Array [
              Object {
                "answers": Array [
                  Object {
                    "id": "dummy_answer_id_1",
                    "text": "efgh",
                  },
                  Object {
                    "id": "dummy_answer_id_2",
                    "text": "abcd",
                  },
                ],
                "id": "dummy_question_id",
              },
            ],
          },
        ],
        "id": "dummy_lesson_id",
        "order": 0,
        "title": "dummy_lesson_title",
      }
    }
    onContentStepperClick={[MockFunction]}
    onQuestionAnswerSubmit={[MockFunction]}
  />
</ContextProvider>
`;

exports[`Sidebar should match previous snapshot (without question) 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Sidebar
    conceptContent={
      Array [
        Object {
          "content": "test lesson content",
          "description": "test lesson description",
          "id": 1,
          "order": 0,
          "title": "test lesson",
        },
        Object {
          "content": "lesson 1's content",
          "description": "another lesson description",
          "id": 1,
          "order": 1,
          "title": "lesson 1",
        },
        Object {
          "content": "lesson 2's content",
          "description": "another lesson description",
          "id": 2,
          "order": 2,
          "title": "lesson 2",
        },
      ]
    }
    conceptTitle="test concept"
    currentLesson={
      Object {
        "content": "test lesson content",
        "description": "test lesson description",
        "id": 0,
        "order": 0,
        "title": "test lesson",
      }
    }
    onContentStepperClick={[MockFunction]}
    onQuestionAnswerSubmit={[MockFunction]}
  />
</ContextProvider>
`;
